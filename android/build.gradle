/**
 * The buildscript block is where you configure the repositories and dependencies for Gradle
 * You should not include dependencies for your modules here.
 * For example, this block includes the Android plugin for Gradle as a dependency because 
 * it provides the additional instructions Gradle needs to build Android app modules.
 */
buildscript {

    /**
     * The repositories block configures the repositories Gradle uses to search or download the dependencies. 
     * Gradle pre-configures support for remote repositories such as JCenter, Maven Central, and Ivy. 
     * You can also use local repositories or define your own remote repositories. 
     * The code below defines JCenter as the repository Gradle should use to look for its dependencies.
     *
     * New projects created using Android Studio 3.0 and higher also include
     * Google's Maven repository.
     */
    repositories {
        // Gradle 4.1 and higher include support for Google's Maven repo using the google() method. 
        // And you need to include this repo to download Android Gradle plugin 3.0.0 or higher.
        google()
        jcenter()
    }

    /**
     * The dependencies block configures the dependencies Gradle needs to use to build your project. 
     * The following line adds Android plugin for Gradle version 4.0.0 as a classpath dependency.
     */
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'
    }
}

/**
 * The allprojects block is where you configure the repositories and dependencies used by all modules in your project
 * , such as third-party plugins or libraries. 
 * However, you should configure module-specific dependencies in each module-level build.gradle file. 
 * For new projects, Android Studio includes JCenter and Google's Maven repository by default, 
 * but it does not configure any dependencies (unless you select a template that requires some).
 */

allprojects {
   repositories {
       google()
       jcenter()
   }
}

// This block encapsulates custom properties and makes them available to all modules in the project.
ext {
    // The following are only a few examples of the types of properties you can define.
    compileSdkVersion = 28

    // You can also create properties to specify versions for dependencies.
    // Having consistent versions between modules can avoid conflicts with behavior.
    supportLibVersion = "28.0.0"
}

/**
 * The first line in the build configuration applies the Android plugin for Gradle to this build and 
 * This makes the android block available to specify Android-specific build options.
 */

apply plugin: 'com.android.application'

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */

android {

  /**
   * compileSdkVersion specifies the Android API level Gradle should use to compile your app. 
   * This means your app can use the API features included in this API level and lower.
   * Using 21 here (platforms;android-21)
   * Change to 28 to use (platforms;android-28)
   */

  compileSdkVersion "android-21"

  /**
   * buildToolsVersion specifies the version of the SDK build tools, command-line
   * utilities, and compiler that Gradle should use to build your app. 
   * You need to download the build tools using the SDK Manager.
   *
   * This property is optional because the plugin uses a recommended version of the build tools by default.
   */

  buildToolsVersion "29.0.2"

  // This will define the name of the apk file in the output folder (build\outputs\apk)
  project.archivesBaseName = "tea";

  /**
   * The defaultConfig block encapsulates default settings and entries for all build variants, 
   * and can override some attributes in main/AndroidManifest.xml dynamically from the build system. 
   * You can configure product flavors to override these values for different versions of your app.
   */

  defaultConfig {

    /**
     * applicationId uniquely identifies the package for publishing.
     * However, your source code should still reference the package name
     * defined by the package attribute in the main/AndroidManifest.xml file.
     */

    applicationId 'com.emptool.tea'

    // Defines the minimum API level required to run the app.
    minSdkVersion 18

    // Specifies the API level used to test the app.
    targetSdkVersion 26

    // Defines the version number of your app.
    versionCode 1

    // Defines a user-friendly version name for your app.
    versionName "1.0"
  }

  /**
   * The buildTypes block is where you can configure multiple build types.
   * By default, the build system defines two build types: debug and release. 
   * The debug build type is not explicitly shown in the default build configuration,
   * but it includes debugging tools and is signed with the debug key. 
   * The release build type applies Proguard settings and is not signed by default.
   */

  buildTypes {

    /**
     * By default, Android Studio configures the release build type to enable code
     * shrinking, using minifyEnabled, and specifies the default Proguard rules file.
     */

    release {
        minifyEnabled true // Enables code shrinking for the release build type.
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

}


/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5/userguide/java_library_plugin.html
 */


// plugins {
//     // Apply the java-library plugin to add support for Java Library
//     id 'java-library'
// }

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

/**
 * The dependencies block in the module-level build configuration file specifies dependencies required to build only the module itself.
 */

dependencies {
    // ZX: Don't think we need this
    // implementation project(":lib")

    implementation 'com.android.support:appcompat-v7:22.0.0'
    implementation 'com.google.android.gms:play-services:7.8+'

    // implementation 'com.android.support:appcompat-v7:26.0.2'
    // implementation 'com.google.mlkit:barcode-scanning:16.0.0'
    //implementation 'com.google.android.gms:play-services:7.8+'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}


/**
 * Add other tasks here
 */
